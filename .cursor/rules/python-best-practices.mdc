---
description: 
globs: ["**/*.py"]
alwaysApply: true
---
# Python Project Development Guidelines

## Code Style
- Follow PEP8 code style. Use black or autopep8 for auto-formatting, and flake8 for static checking.
- Use snake_case for variables, functions, and method names; use PascalCase for class names.
- Limit each line to 88 characters (black default). Use noqa for justified exceptions.
- Avoid wildcard imports (e.g., from xxx import *).

## Comments and Documentation
- All modules, classes, and functions must include PEP257-style docstrings, covering purpose, parameters (Args), return values (Returns), and exceptions (Raises).
- Docstrings are recommended to follow Google or NumPy style, and should be concise, accurate, and complete.
- Complex logic should have necessary inline comments. Comments should be concise and consistent in language (English or Chinese, but unified per project).
- Public APIs must document parameters, return values, exceptions, and usage examples in the docstring.

## Dependency Management
- All dependencies must be listed in requirements.txt and/or pyproject.toml.
- Use venv or poetry for virtual environment and dependency management.
- When adding dependencies, update dependency files and document installation in README.md.

## Code Structure
- Organize code by functional modules; avoid overly large single files.
- Common utility functions should be placed in a utils/ directory.
- Separate test code from main code; place tests in a tests/ directory, and name test cases with test_ prefix.

## Version Control and Commits
- .gitignore should exclude virtual environments, logs, data, and temporary files.
- Commit messages must follow the Conventional Commits specification:
  - Format: <type>(<scope>): <description>
  - Common types: feat, fix, docs, style, refactor, test, chore
  - Example: feat(model): add transformer encoder support
  - Example: fix(utils): handle None input in tokenizer
  - Example: docs(readme): update installation guide
- Major changes should be recorded in README.md or CHANGELOG.md.

## Security and Robustness
- Avoid hardcoding sensitive information; use environment variables for secrets.
- Add exception handling for critical operations to prevent crashes.
- Use type hints to improve code readability and maintainability.

## Others
- Use pre-commit hooks for auto-formatting and lint checking.
- All tests and lint checks must pass before merging code.
- Regularly update dependencies and fix security vulnerabilities in a timely manner.
